---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  tags: vars

- name: Get our user
  command: "whoami"
  register: my_user

- name: Get our primary group
  command: "id -g -n"
  register: my_group

- name: Create guestfs directory
  ansible.builtin.file:
    path: "{{ guestfs_path }}"
    state: directory
  when: kdevops_enable_guestfs

- name: Verify Ansible nodes template file exists {{ kdevops_nodes_template_full_path }}
  stat:
    path: "{{ kdevops_nodes_template_full_path }}"
  register: ansible_nodes_template

- name: Set generic nodes array
  tags: vars
  set_fact:
    generic_nodes: "{{ [ kdevops_host_prefix ] }}"
  when:
    - not kdevops_baseline_and_dev

- name: Set generic nodes array on dual baseline and dev systems
  tags: vars
  set_fact:
    generic_nodes: "{{ [ kdevops_host_prefix ] + [ kdevops_host_prefix + '-dev' ] }}"
  when:
    - kdevops_baseline_and_dev

- name: Set nfsd_nodes list
  set_fact:
    nfsd_nodes: "{{ [ kdevops_host_prefix + '-nfsd' ] }}"
  when:
    - kdevops_nfsd_enable|bool

- name: Add an nfs server if one was selected
  set_fact:
    generic_nodes: "{{ generic_nodes + nfsd_nodes }}"
  when:
    - kdevops_nfsd_enable|bool

- name: Set kdc_nodes list
  set_fact:
    kdc_nodes: "{{ [ kdevops_host_prefix + '-kdc' ] }}"
  when:
    - kdevops_krb5_enable|bool

- name: Add a KRB5 KDC if one was selected
  set_fact:
    generic_nodes: "{{ generic_nodes + kdc_nodes }}"
  when:
    - kdevops_krb5_enable|bool

- name: Set fstests config file variable for {{ fstests_fstyp }}
  set_fact:
    is_fstests: True
    fs_config_path: "{{ kdevops_playbooks_dir_full_path }}/{{ fs_config_role_path }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_fstests
    - ansible_nodes_template.stat.exists
  tags: vars

- name: Verify fstest config file file exists {{ fs_config_path }}
  stat:
    path: "{{ fs_config_path }}"
  register: fstests_config_file_reg
  when:
    - is_fstests|bool

- name: Check if {{ kdevops_nodes }} exists already
  stat:
    path: "{{ topdir_path }}/{{ kdevops_nodes }}"
  register: kdevops_nodes_dest

- name: Ensure proper permission on {{ kdevops_nodes }}
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    path: "{{ topdir_path }}/{{ kdevops_nodes }}"
    owner: "{{ my_user.stdout }}"
    group: "{{ my_group.stdout }}"
  when:
    - kdevops_nodes_dest.stat.exists

- name: Generate the generic kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'nodes' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    all_generic_nodes: "{{ generic_nodes }}"
    nodes: "{{ all_generic_nodes }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - not kdevops_workflows_dedicated_workflow
    - ansible_nodes_template.stat.exists

- name: Generate the pynfs kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'nodes' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    all_generic_nodes: "{{ nfsd_nodes }}"
    nodes: "{{ all_generic_nodes }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_pynfs
    - ansible_nodes_template.stat.exists

- name: Generate the cxl kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'nodes' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    all_generic_nodes: "{{ generic_nodes }}"
    nodes: "{{ all_generic_nodes }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_cxl
    - ansible_nodes_template.stat.exists

- name: Generate the gitr kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'nodes' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    all_generic_nodes: "{{ generic_nodes }}"
    nodes: "{{ all_generic_nodes }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_gitr
    - ansible_nodes_template.stat.exists

- name: Initialize the enabled nodes list for ltp
  tags: [ 'hosts' ]
  set_fact:
    is_ltp: True
    ltp_enabled_nodes: "{{ ltp_enabled_test_groups|ansible.builtin.split }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_ltp
    - ansible_nodes_template.stat.exists

- name: Expand the ltp node list to include -dev nodes
  tags: [ 'hosts' ]
  set_fact:
    ltp_enabled_nodes: "{{ ltp_enabled_nodes + [ item + '-dev' ] }}"
  with_items: "{{ ltp_enabled_test_groups|ansible.builtin.split }}"
  when:
    - is_ltp|bool
    - kdevops_baseline_and_dev|bool

- name: Generate a kdevops nodes file using {{ kdevops_nodes_template }} as the template
  tags: [ 'hosts' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    all_generic_nodes: "{{ generic_nodes }}"
    nodes: "{{ [kdevops_host_prefix + '-'] | product(ltp_enabled_nodes) | map('join') | list }}"
  ansible.builtin.template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - is_ltp|bool

- name: Set empty enabled test types list for fstests
  tags: [ 'hosts' ]
  set_fact:
    fstests_enabled_nodes: []
  when:
    - is_fstests|bool
    - ansible_nodes_template.stat.exists

- name: Check which fstests test types are enabled
  register: fstests_enabled_test_types_reg
  vars:
    fs: "{{ fstests_fstyp | upper }}"
    config_val: "{{ 'CONFIG_FSTESTS_' + fs + '_SECTION_' }}"
    fs_config_data: "{{ lookup('file', fs_config_path) }}"
    sections_without_default: "{{ fs_config_data | regex_replace('\\[default\\]', multiline=True) }}"
    sections_lines: "{{ sections_without_default | regex_findall('^\\[(.*)', multiline=True) }}"
    clean_section_lines: "{{ sections_lines | regex_replace('\\[') | regex_replace('\\]') }}"
    clean_section_lines_without_fsname: "{{ clean_section_lines | regex_replace(fstests_fstyp + '_') }}"
    config_sections_targets: "{{ clean_section_lines_without_fsname |  replace(\"'\", '') | split(', ') }}"
  lineinfile:
    path: "{{ topdir_path }}/.config"
    regexp: '^({{ config_val + item.upper() }})=y'
    line: ''
  check_mode: yes
  with_items: "{{ config_sections_targets }}"
  loop_control:
    label: "Checking for {{ config_val + item.upper() }}"
  when:
    - is_fstests|bool
    - ansible_nodes_template.stat.exists

- name: Now expand the list of enabled fstests for valid configuration sections
  tags: [ 'nodes' ]
  vars:
    fs_test_section: "{{ fstests_fstyp + '-' + item.item | regex_replace('_', '-') }}"
    node: "{{ kdevops_host_prefix + '-' + fs_test_section }}"
  set_fact:
    fstests_enabled_nodes: "{{ fstests_enabled_nodes + [ node ] }}"
  with_items: "{{ fstests_enabled_test_types_reg.results }}"
  loop_control:
    label: "Checking for {{ item.item }} "
  when:
    - is_fstests|bool
    - ansible_nodes_template.stat.exists
    - item.changed
    - not kdevops_baseline_and_dev

- name: Now expand the list of enabled fstests for valid configuration sections with dev hosts
  tags: [ 'nodes' ]
  vars:
    fs_test_section: "{{ fstests_fstyp + '-' + item.item | regex_replace('_', '-') }}"
    node: "{{ kdevops_host_prefix + '-' + fs_test_section }}"
  set_fact:
    fstests_enabled_nodes: "{{ fstests_enabled_nodes + [ node ] + [ node + '-dev' ] }}"
  with_items: "{{ fstests_enabled_test_types_reg.results }}"
  loop_control:
    label: "Checking for {{ item.item }} "
  when:
    - is_fstests|bool
    - ansible_nodes_template.stat.exists
    - item.changed
    - kdevops_baseline_and_dev

- name: Add the nfs server if one was selected
  set_fact:
    fstests_enabled_nodes: "{{ fstests_enabled_nodes + nfsd_nodes }}"
  when:
    - is_fstests|bool
    - kdevops_nfsd_enable|bool

- name: Add the KRB5 KDC if one was selected
  set_fact:
    fstests_enabled_nodes: "{{ fstests_enabled_nodes + kdc_nodes }}"
  when:
    - is_fstests|bool
    - kdevops_krb5_enable|bool

- name: Generate the fstests kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'hosts' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    nodes: "{{ fstests_enabled_nodes |  regex_replace('\\[') | regex_replace('\\]') | replace(\"'\", '') | split(', ') }}"
    all_generic_nodes: "{{ fstests_enabled_nodes }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - is_fstests|bool
    - ansible_nodes_template.stat.exists

- name: Infer enabled blktests test section types
  vars:
    kdevops_config_data: "{{ lookup('file', topdir_path + '/.config') }}"
    config_val: "CONFIG_BLKTESTS_SECTION_"
    config_block_test_types: "{{ kdevops_config_data | regex_findall('^' + config_val + '(.*)=y$', multiline=True) }}"
    config_block_test_type_names: "{{ config_block_test_types | lower }}"
  set_fact:
    blktests_enabled_test_types: "{{ [kdevops_host_prefix + '-'] | product(config_block_test_type_names) | map('join') | list }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_nodes_template.stat.exists
    - not kdevops_baseline_and_dev

- name: Infer enabled blktests test section types with dev hosts
  vars:
    kdevops_config_data: "{{ lookup('file', topdir_path + '/.config') }}"
    config_val: "CONFIG_BLKTESTS_SECTION_"
    config_block_test_types: "{{ kdevops_config_data | regex_findall('^' + config_val + '(.*)=y$', multiline=True) }}"
    config_block_test_type_names: "{{ config_block_test_types | lower }}"
    all_nodes: "{{ [kdevops_host_prefix + '-'] | product(config_block_test_type_names) | map('join') | list }}"
  set_fact:
    blktests_enabled_test_types: "{{ all_nodes | product(['', '-dev']) | map('join') | list }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_nodes_template.stat.exists
    - kdevops_baseline_and_dev

- name: Debug inferring block test types
  debug:
    var: blktests_enabled_test_types
  when:
    - False
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_nodes_template.stat.exists

- name: Generate the blktests kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'hosts' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    nodes: "{{ blktests_enabled_test_types }}"
    all_generic_nodes: "{{ blktests_enabled_test_types }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_blktests
    - ansible_nodes_template.stat.exists

- name: Infer enabled selftests test section types
  vars:
    kdevops_config_data: "{{ lookup('file', topdir_path + '/.config') }}"
    config_val: "CONFIG_SELFTESTS_SECTION_"
    config_selftests_test_types: "{{ kdevops_config_data | regex_findall('^' + config_val + '(.*)=y$', multiline=True) }}"
    config_selftests_test_type_names: "{{ config_selftests_test_types | lower }}"
  set_fact:
    selftests_enabled_test_types: "{{ [kdevops_host_prefix + '-'] | product(config_selftests_test_type_names) | map('join') | list }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_selftests
    - ansible_nodes_template.stat.exists
    - not kdevops_baseline_and_dev

- name: Infer enabled selftests test section types with dev hosts
  vars:
    kdevops_config_data: "{{ lookup('file', topdir_path + '/.config') }}"
    config_val: "CONFIG_SELFTESTS_SECTION_"
    config_block_test_types: "{{ kdevops_config_data | regex_findall('^' + config_val + '(.*)=y$', multiline=True) }}"
    config_block_test_type_names: "{{ config_selftests_test_types | lower }}"
    all_nodes: "{{ [kdevops_host_prefix + '-'] | product(config_selftests_test_type_names) | map('join') | list }}"
  set_fact:
    selftests_enabled_test_types: "{{ all_nodes | product(['', '-dev']) | map('join') | list }}"
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_selftests
    - ansible_nodes_template.stat.exists
    - kdevops_baseline_and_dev

- name: Generate the selftests kdevops nodes file using {{ kdevops_nodes_template }} as jinja2 source template
  tags: [ 'hosts' ]
  vars:
    node_template: "{{ kdevops_nodes_template | basename }}"
    nodes: "{{ selftests_enabled_test_types }}"
    all_generic_nodes: "{{ selftests_enabled_test_types }}"
  template:
    src: "{{ node_template }}"
    dest: "{{ topdir_path }}/{{ kdevops_nodes }}"
    force: yes
  when:
    - kdevops_workflows_dedicated_workflow
    - kdevops_workflow_enable_selftests
    - ansible_nodes_template.stat.exists

- name: Verify vagrant template file exists {{ kdevops_vagrant_template_full_path }}
  stat:
    path: "{{ kdevops_vagrant_template_full_path }}"
  register: vagrant_template
  when:
    - kdevops_enable_vagrant

- name: Check if {{ kdevops_vagrant }} exists already
  stat:
    path: "{{ topdir_path }}/{{ kdevops_vagrant }}"
  register: vagrant_dest
  when:
    - kdevops_enable_vagrant

- name: Ensure proper permission on {{ kdevops_vagrant }}
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    path: "{{ topdir_path }}/{{ kdevops_vagrant }}"
    owner: "{{ my_user.stdout }}"
    group: "{{ my_group.stdout }}"
  when:
    - kdevops_enable_vagrant|bool
    - vagrant_dest.stat.exists

- name: Generate the {{ kdevops_vagrant_generated }} file using {{ kdevops_vagrant_template }} as jinja2 source template
  tags: [ 'vagrant' ]
  template:
    src: "{{ kdevops_vagrant_template | basename }}"
    dest: "{{ topdir_path }}/{{ kdevops_vagrant_generated }}"
    force: yes
  when:
    - kdevops_enable_vagrant|bool
    - vagrant_template.stat.exists

- name: Copy the generated {{ kdevops_vagrant_generated }} to {{ kdevops_vagrant }} if it does not exist already
  tags: [ 'vagrant' ]
  command: "cp {{ topdir_path }}/{{ kdevops_vagrant_generated }} {{ topdir_path }}/{{ kdevops_vagrant }}"
  when:
    - kdevops_enable_vagrant|bool
    - vagrant_template.stat.exists
    - not vagrant_dest.stat.exists

- name: Import list of guest nodes
  include_vars: "{{ topdir_path }}/{{ kdevops_nodes }}"
  ignore_errors: yes
  when:
    - kdevops_enable_guestfs

- name: Create local directories for each of the guests
  ansible.builtin.file:
    path: "{{ guestfs_path }}/{{ item.name }}"
    state: directory
  with_items: "{{ guestfs_nodes }}"
  when: kdevops_enable_guestfs

- name: Generate XML files for the libvirt guests for PCI passthrough for guestfs
  delegate_to: localhost
  run_once: true
  shell: |
    set -o pipefail
    {{ role_path }}/python/gen_pcie_passthrough_guestfs_xml.py
  args:
    executable: /bin/bash
    chdir: "{{ topdir_path }}"
  when:
    - kdevops_enable_guestfs
    - pcie_passthrough_enable|bool

- name: Generate XML files for the libvirt guests
  vars:
    hostname: "{{ item.name }}"
  template:
    src: "guestfs_{{ libvirt_machine_type }}.j2.xml"
    dest: "{{ topdir_path }}/guestfs/{{ hostname }}/{{ hostname }}.xml"
    force: yes
  with_items: "{{ guestfs_nodes }}"
  when:
    - kdevops_enable_guestfs
