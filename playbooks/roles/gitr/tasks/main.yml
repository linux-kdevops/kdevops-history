---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  tags: vars

- name: Set the pathname of the local results directory
  tags: vars
  ansible.builtin.set_fact:
    gitr_test_group: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') }}"
    gitr_results_dir: "../workflows/gitr/results/"

- name: Ensure the local results directory exists
  tags: copy_results
  ansible.builtin.file:
    path: "{{ gitr_results_dir }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost
  run_once: true

- name: Install dependencies for {{ ansible_os_family }}
  tags: gitr
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.package:
    name: "{{ gitr_os_family_packages[ansible_os_family] }}"
    state: present

- name: Remove the old test file system, if needed
  tags: [ 'gitr' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.posix.mount:
    path: "{{ gitr_mnt }}"
    state: unmounted

- name: Create the file system under test, if needed
  tags: [ 'gitr' ]
  include_role:
    name: create_partition
  vars:
    disk_setup_device: "{{ gitr_device }}"
    disk_setup_fstype: "{{ gitr_fstype }}"
    disk_setup_label : "{{ gitr_label }}"
    disk_setup_fs_opts: "-L {{ gitr_label }}"
    disk_setup_path: "{{ gitr_mnt }}"
    disk_setup_mount_opts: "{{ gitr_mount_opts }}"
  when:
    - not gitr_uses_no_devices|bool

- name: Create the tmpfs file system under test, if needed
  tags: [ 'gitr' ]
  include_role:
    name: create_tmpfs
  vars:
    tmpfs_mnt_options: "{{ gitr_mount_opts }}"
    tmpfs_mounted_on: "{{ gitr_mnt }}"
  when:
    - gitr_fstype == "tmpfs"

- name: Set the export pathname
  tags: [ 'gitr' ]
  set_fact:
    gitr_nfs_server_export: "{{ ansible_host }}-gitr"
  when:
    - gitr_nfs_use_kdevops_nfsd|bool
    - gitr_fstype == "nfs"

- name: Create an NFSD export for testing
  include_role:
    name: nfsd_add_export
  vars:
    server_host: "{{ gitr_nfs_server_host }}"
    export_volname: "{{ gitr_nfs_server_export }}"
    export_options: "{{ nfsd_export_options }}"
    export_fstype: "{{ nfsd_export_fstype }}"
    export_size: 5g
  when:
    - gitr_nfs_use_kdevops_nfsd|bool
    - gitr_fstype == "nfs"

- name: Form the list of NFS mount options to use
  tags: gitr
  ansible.builtin.set_fact:
    gitr_nfs_vers: "{{ gitr_nfs_vers_dict[gitr_test_group] }}"
    gitr_nfs_mount_opts: "{{ gitr_mount_opts | ansible.builtin.split(',') }}"
  when:
    - kdevops_workflows_dedicated_workflow|bool
    - gitr_fstype == "nfs"

- name: Create the NFS mount under test, if needed
  tags: gitr
  ansible.builtin.include_role:
    name: create_nfs_mount
  vars:
    nfs_mounted_on: "{{ gitr_mnt }}"
    nfs_server_hostname: "{{ gitr_nfs_server_host }}"
    nfs_server_export: "{{ nfsd_export_path }}/{{ gitr_nfs_server_export }}"
    nfs_mount_options: "{{ (gitr_nfs_vers + gitr_nfs_mount_opts) | join(',') }}"
  when:
    - kdevops_workflows_dedicated_workflow|bool
    - gitr_fstype == "nfs"

- name: Create the NFS mount under test, if needed
  tags: gitr
  ansible.builtin.include_role:
    name: create_nfs_mount
  vars:
    nfs_mounted_on: "{{ gitr_mnt }}"
    nfs_server_hostname: "{{ gitr_nfs_server_host }}"
    nfs_server_export: "{{ nfsd_export_path }}/{{ gitr_nfs_server_export }}"
    nfs_mount_options: "{{ gitr_mount_opts }}"
  when:
    - not kdevops_workflows_dedicated_workflow|bool
    - gitr_fstype == "nfs"

- name: Remove old git dir
  tags: [ 'gitr' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.file:
    path: "{{ gitr_mnt }}/git"
    state: absent

- name: git clone git
  tags: [ 'gitr' ]
  ansible.builtin.git:
    repo: "{{ gitr_repo }}"
    dest: "{{ gitr_mnt }}/git"
    update: yes
    version: "{{ gitr_repo_commit }}"
  retries: 3
  delay: 5
  register: result
  until: not result.failed

- name: Get nproc
  tags: [ 'gitr', 'build', 'vars' ]
  ansible.builtin.command: "{{ num_jobs }}"
  register: nproc
  changed_when: False

- name: Build git
  tags: [ 'gitr', 'build' ]
  community.general.make:
    chdir: "{{ gitr_mnt }}/git"
    jobs: "{{ nproc.stdout }}"

- name: Run the full git regression suite
  tags: [ 'run_tests' ]
  ansible.builtin.shell:
    cmd: "prove -Q --jobs {{ nproc.stdout }} ./t[0-9]*.sh"
    chdir: "{{ gitr_mnt }}/git/t"
  register: gitr_results
  failed_when: False
  changed_when: False

- name: Run specific git regression tests
  tags: run_specific_tests
  ansible.builtin.shell:
    cmd: "prove {{ gitr_test_list }}"
    chdir: "{{ gitr_mnt }}/git/t"
  register: gitr_results
  failed_when: false
  changed_when: false

- name: Capture RPC statistics
  tags: copy_results
  ansible.builtin.command: "mountstats --rpc"
  register: rpc_results
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'
  changed_when: false

- name: Capture transport statistics
  tags: copy_results
  ansible.builtin.command: "mountstats --xprt"
  register: xprt_results
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'
  changed_when: false

- name: Save git regression test output to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ gitr_results.stdout_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/gitr.stdout"
    mode: "u=rw,g=r,o=r"

- name: Save standard error to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ gitr_results.stderr_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/gitr.stderr"
    mode: "u=rw,g=r,o=r"
  when: gitr_results.rc != 0

- name: Save RPC statistics to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ rpc_results.stdout_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/gitr.rpc"
    mode: "u=rw,g=r,o=r"
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Save transport statistics to a file
  tags: copy_results
  ansible.builtin.copy:
    content: "{{ xprt_results.stdout_lines|join('\n') }}\n"
    dest: "{{ gitr_mnt }}/gitr.xprt"
    mode: "u=rw,g=r,o=r"
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Copy regression results to the control host
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/gitr.stdout"
    dest: "{{ gitr_results_dir }}/{{ ansible_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false

- name: Copy stderr to the control host
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/gitr.stderr"
    dest: "{{ gitr_results_dir }}/{{ ansible_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false
  when: gitr_results.rc != 0

- name: Copy RPC statistics to the control host
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/gitr.rpc"
    dest: "{{ gitr_results_dir }}/{{ ansible_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'

- name: Copy transport statistics to the control host
  tags: copy_results
  ansible.builtin.fetch:
    src: "{{ gitr_mnt }}/gitr.xprt"
    dest: "{{ gitr_results_dir }}/{{ ansible_kernel }}/{{ gitr_test_group }}/"
    flat: true
    validate_checksum: false
  when:
    - gitr_fstype == "nfs"
    - ansible_os_family == 'RedHat'
