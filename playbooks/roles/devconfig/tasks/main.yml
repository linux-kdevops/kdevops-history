---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  tags: vars,vars_simple,vars_extra

- name: Wait for {{ ansible_host }} to be available
  wait_for_connection:

- name: Gathering facts
  setup:
  tags: always

# Update /etc/hostname first so the change gets picked up by the reboot
# that occurs during the distro-specific tasks

- name: Ensure /etc/hostname is set
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  template:
    src: hostname
    dest: /etc/hostname
  tags: hostname

# Distro specific
- name: Install dependencies
  import_tasks: install-deps/main.yml

- name: Configure custom repositories and install packages
  import_tasks: config-custom-repos-and-packages/main.yml
  when:
    - ansible_facts['os_family']|lower == 'redhat'

# Distro agnostic stuff goes below

- name: Check if the developer has a git config
  delegate_to: localhost
  stat:
    path={{ dev_gitconfig_src }}
  run_once: true
  register: dev_git_config_file

- name: Copy the developer's gitconfig *if* it exists
  copy:
    src={{ dev_gitconfig_src }}
    dest={{ dev_gitconfig_dest }}
  when: dev_git_config_file.stat.exists

- name: Copy the developer's gitconfig *if* it exists to root
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  copy:
    src={{ dev_gitconfig_dest }}
    dest=/root/
    remote_src=yes
  when: dev_git_config_file.stat.exists

- name: Check if the system has a user vimrc file
  stat:
    path=~/.vimrc
  register: dev_vimrc_file
  tags: vimrc

- name: Copy over our default kernel hacking vimrc
  template:
    src: vimrc
    dest: ~/.vimrc
  tags: vimrc
  when: not dev_vimrc_file.stat.exists

- name: Check if the system has a user vimrc file as root
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  stat:
    path=~/.vimrc
  register: dev_root_vimrc_file
  tags: vimrc

- name: Copy over our default kernel hacking vimrc for root
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  template:
    src: vimrc
    dest: ~/.vimrc
  tags: vimrc
  when: not dev_root_vimrc_file.stat.exists

- name: Check if the developer has a configuration file with favorite bash hacks
  delegate_to: localhost
  stat:
    path={{ dev_bash_config_hacks_src }}
  register: dev_bash_config_file

- name: Copy the developer's favorite bash hacks over *if* it exists
  copy:
    src={{ dev_bash_config_hacks_src }}
    dest={{ dev_bash_config_hacks_dest }}
  when: dev_bash_config_file.stat.exists
  register: dev_bash_config_file_copied

- name: Source the developer's bash hack script
  shell: |
    SOURCE_BASH_HACKS="test -s {{ dev_bash_config_hacks_generic }}  && . {{ dev_bash_config_hacks_generic }} || true"
    if [ -f {{ dev_bash_config }} ]; then
      if ! grep "{{ dev_bash_config_hacks_name }}" {{ dev_bash_config }}  2>&1 > /dev/null ; then
        echo "$SOURCE_BASH_HACKS" >> {{ dev_bash_config }}
      fi
    else
      echo "#!/bin/bash" >> {{ dev_bash_config }}
      echo "$SOURCE_BASH_HACKS" >> {{ dev_bash_config }}
      chmod 755 {{ dev_bash_config }}
    fi
  args:
    executable: /bin/bash
  when: dev_bash_config_file_copied is success

- name: Copy the developer's favorite bash hacks over for root *if* it exists
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  copy:
    src={{ dev_bash_config_hacks_src }}
    dest=/root/
  when: dev_bash_config_file.stat.exists
  register: dev_bash_config_file_copied_root

- name: Source the developer's bash hack script for root
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  shell: |
    SOURCE_BASH_HACKS="test -s {{ dev_bash_config_hacks_generic }}  && . {{ dev_bash_config_hacks_generic }} || true"
    if [ -f {{ dev_bash_config_root }} ]; then
      if ! grep "{{ dev_bash_config_hacks_name }}" {{ dev_bash_config_root }}  2>&1 > /dev/null ; then
        echo "$SOURCE_BASH_HACKS" >> {{ dev_bash_config_root }}
      fi
    else
      echo "#!/bin/bash" >> {{ dev_bash_config_root }}
      echo "$SOURCE_BASH_HACKS" >> {{ dev_bash_config_root }}
      chmod 755 {{ dev_bash_config_root }}
    fi
  args:
    executable: /bin/bash
  when: dev_bash_config_file_copied_root is success

- name: Check to see if system has GRUB2
  stat:
    path=/etc/default/grub
  register: grub2_config_file
  tags: [ 'console' ]

- name: Check to see if stupid /etc/default/grub.d/15_timeout.cfg exists
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  stat:
    path=/etc/default/grub.d/15_timeout.cfg
  register: stupid_cloud_grub_timeout
  when:
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Remove stupid cloud /etc/default/grub.d/15_timeout.cfg
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    path: /etc/default/grub.d/15_timeout.cfg
    state: absent
  when:
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Check to see if the GRUB GRUB_CMDLINE_LINUX is present
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: grub_cmdline_linux_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=\")(.*)'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Check to see if the GRUB GRUB_CMDLINE_LINUX is empty
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: cmdline_linux_empty_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX)=\"\"'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - grub_cmdline_linux_grep.changed
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Check to see if the consoleblank is used
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: console_blank_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=\")(.*)(\s*)consoleblank(.*)'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - grub_cmdline_linux_grep.changed
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Check to see if the console is already configured on your GRUB config
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: console_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=\")(.*)(\s*)console(.*)'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - grub_cmdline_linux_grep.changed
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Update GRUB configuration to add console kernel parameters
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=\")((\s*)(.*)*)(\s*)"$'
    backrefs: yes
    line: '\1\2 {{ devconfig_kernel_console }}"'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - not console_grep.changed
    - not cmdline_linux_empty_grep.changed
  tags: [ 'console' ]

- name: Update GRUB configuration to add console kernel parameters for consoleblank configs
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=\")((\s*)(.*)*)(\s*)"$'
    backrefs: yes
    line: '\1 {{ devconfig_kernel_console }}"'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - console_blank_grep.changed|bool
    - not cmdline_linux_empty_grep.changed
  tags: [ 'console' ]

- name: Add new GRUB console kernel parameters to your empty GRUB_CMDLINE_LINUX
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX)=\"\"'
    line: 'GRUB_CMDLINE_LINUX="{{ devconfig_kernel_console }}"'
  when:
    - grub2_config_file.stat.exists
    - grub_cmdline_linux_grep.changed
    - cmdline_linux_empty_grep.changed
    - devconfig_enable_console|bool
    - cmdline_linux_empty_grep.changed
    - not console_grep.changed
  tags: [ 'console' ]

- name: Add new GRUB GRUB_CMDLINE_LINUX with console kernel parameters
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    insertafter: EOF
    regexp: '^(GRUB_CMDLINE_LINUX=\")(.*)'
    line: 'GRUB_CMDLINE_LINUX="{{ devconfig_kernel_console }}"'
  when:
    - grub2_config_file.stat.exists
    - not grub_cmdline_linux_grep.changed
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Check to see if the GRUB timeout is defined in your configuration
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: grub_timeout_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_TIMEOUT=)(.*)'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Update GRUB timeout
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_TIMEOUT=)(.*)'
    line: 'GRUB_TIMEOUT={{ devconfig_grub_timeout }}'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - grub_timeout_grep.changed
  tags: [ 'console' ]

- name: Add GRUB timeout
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    insertafter: EOF
    regexp: '^(GRUB_TIMEOUT=)(.*)'
    line: 'GRUB_TIMEOUT={{ devconfig_grub_timeout }}'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - not grub_timeout_grep
  tags: [ 'console' ]

- name: Check to see if the GRUB serial command is defined
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: serial_command_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_SERIAL_COMMAND=\")(.*)\"\s*"'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
  tags: [ 'console' ]

- name: Update GRUB configuration to add GRUB console parameters if set
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_SERIAL_COMMAND=\")((\s*)(.*)*)(\s*)"$'
    backrefs: yes
    line: '\1{{ devconfig_grub_console }}"'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - serial_command_grep.changed
  tags: [ 'console' ]

- name: Add GRUB console parameters
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    insertafter: EOF
    regexp: '^(GRUB_SERIAL_COMMAND=\")(.*)'
    line: 'GRUB_SERIAL_COMMAND="{{ devconfig_grub_console }}"'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - not serial_command_grep.changed
  tags: [ 'console' ]

- name: Check to see if the GRUB terminal settings is defined
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  register: grub_terminal_grep
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_TERMINAL)=(.*)'
    line: ''
  check_mode: yes
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
  tags: [ 'console' ]

# We use "console serial" so to enable real consoles to be
# preferred first, and fallback to the serial as secondary
# option. This let's us work with hardware serial consoles
# say on IPMIs and virtual guests ('virsh console').
- name: Update GRUB terminal to be serial
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    regexp: '^(GRUB_TERMINAL=)(.*)$'
    backrefs: yes
    line: '\1"console serial"'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - grub_terminal_grep.changed
  tags: [ 'console' ]

- name: Add GRUB terminal setting
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/default/grub
    insertafter: EOF
    regexp: '^(GRUB_TERMINAL=)(.*)$'
    line: 'GRUB_TERMINAL="console serial"'
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - not grub_terminal_grep.changed
  tags: [ 'console' ]

- name: Update your boot GRUB file if necessary
  import_tasks: update-grub/main.yml
  when:
    - grub2_config_file.stat.exists
    - devconfig_enable_console|bool
    - not console_grep.changed or console_blank_grep.changed

- name: Set up the client /etc/systemd/journal-upload.conf
  tags: [ 'journal' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  template:
    src: "journal-upload.conf.j2"
    dest: "/etc/systemd/journal-upload.conf"
    force: yes
    trim_blocks: True
    lstrip_blocks: True
  when:
    - devconfig_enable_systemd_journal_remote|bool

- name: Enable and restart systemd-journal-upload.service on the client
  tags: [ 'journal', 'journal-upload-restart' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.systemd_service:
    name: systemd-journal-upload.service
    enabled: true
    state: restarted
    daemon_reload: true
  when:
    - devconfig_enable_systemd_journal_remote|bool

- name: Ensure systemd-journal-remote.service is running on the server
  tags: [ 'journal-status' ]
  delegate_to: localhost
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.systemd_service:
    name: systemd-journal-remote.service
    state: started
  run_once: true
  when:
    - devconfig_enable_systemd_journal_remote|bool

- name: Ensure systemd-journal-upload.service is running
  tags: [ 'journal-status' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.systemd_service:
    name: systemd-journal-upload.service
    state: started
  when:
    - devconfig_enable_systemd_journal_remote|bool

- name: Set up the client /etc/systemd/timesyncd.conf
  tags: [ 'timesyncd' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  template:
    src: "timesyncd.conf.j2"
    dest: "/etc/systemd/timesyncd.conf"
    force: yes
    trim_blocks: True
    lstrip_blocks: True
  when:
    - devconfig_enable_systemd_timesyncd|bool

- name: Enable NTP on client
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "timedatectl set-ntp true"
  when:
    - devconfig_enable_systemd_timesyncd_ntp|bool

- name: Restart systemd-timesyncd.service on the client
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.systemd_service:
    name: systemd-timesyncd.service
    daemon_reload: true
    enabled: true
    state: restarted
  when:
    - devconfig_enable_systemd_timesyncd|bool

- name: Ensure systemd-timesyncd.service is running on the client
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "timedatectl status"
  when:
    - devconfig_enable_systemd_timesyncd|bool

- name: Gather ipv4 address
  tags: [ 'journal_ln', 'vars_extra' ]
  setup:
    gather_subset:
      - "all_ipv4_addresses"
  when:
    - devconfig_enable_systemd_journal_remote|bool

- name: "Group up facts we'll give to the host"
  tags: [ 'journal_ln' ]
  set_fact:
    node_host_ip: "{{ ansible_ssh_host}} {{ ansible_default_ipv4.address }}"
  delegate_facts: true
  when:
    devconfig_enable_systemd_journal_remote|bool

- name: Set up symlinks for journals
  tags: [ 'journal_ln' ]
  delegate_to: localhost
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{ topdir_path }}/workflows/kdevops/scripts/jounal-ln.sh {{ devconfig_systemd_journal_remote_path }} {{ node_host_ip }}"
  when:
    devconfig_enable_systemd_journal_remote|bool

- name: Enables systemd's watchdog
  stat:
    path=/etc/systemd/system.conf
  register: systemd_config_file
  tags: [ 'systemd_watchdog' ]

- name: Add systemd watchdog RuntimeWatchdogSec setting
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/systemd/system.conf
    insertafter: EOF
    regexp: '^(RuntimeWatchdogSec=)(.*)$'
    line: 'RuntimeWatchdogSec={{ devconfig_systemd_watchdog_runtime_timeout }}'
  when:
    - systemd_config_file.stat.exists
    - devconfig_enable_systemd_watchdog|bool
  tags: [ 'systemd_watchdog' ]

- name: Add systemd watchdog RebootWatchdogSec setting
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/systemd/system.conf
    insertafter: EOF
    regexp: '^(RebootWatchdogSec=)(.*)$'
    line: 'RebootWatchdogSec={{ devconfig_systemd_watchdog_reboot_timeout }}'
  when:
    - systemd_config_file.stat.exists
    - devconfig_enable_systemd_watchdog|bool
  tags: [ 'systemd_watchdog' ]

- name: Add systemd watchdog KExecWatchdogSec setting
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  lineinfile:
    path: /etc/systemd/system.conf
    insertafter: EOF
    regexp: '^(KExecWatchdogSec=)(.*)$'
    line: 'KExecWatchdogSec={{ devconfig_systemd_watchdog_kexec_timeout }}'
  when:
    - systemd_config_file.stat.exists
    - devconfig_enable_systemd_watchdog|bool
  tags: [ 'systemd_watchdog' ]

- name: Set sysctl vm.overcommit_memory={{ devconfig_sysctl_mm_overcommit_memory }}
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  ansible.posix.sysctl:
    name: vm.overcommit_memory
    sysctl_file: "{{ devconfig_sysctl_conf }}"
    value: "{{ devconfig_sysctl_mm_overcommit_memory }}"
    state: present
    sysctl_set: yes
    reload: yes
  when:
    - devconfig_enable_sysctl_tuning
    - devconfig_enable_sysctl_mm_overcommit_memory
  tags: [ 'sysctl' ]

- name: Rev the kernel to the latest distribution kotd
  import_tasks: kotd-rev-kernel/main.yml
  when:
    - devconfig_enable_kotd|bool
  tags: [ 'kotd' ]
