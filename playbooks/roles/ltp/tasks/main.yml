---
- name: Import optional extra_args file
  tags: ['vars']
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - files: # noqa: yaml[indentation]
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  failed_when: false

- name: Set up the /data mount point
  tags: ['data_partition']
  ansible.builtin.include_role:
    name: create_data_partition

- name: Set the pathname of the local results directory
  tags: ['vars']
  ansible.builtin.set_fact:
    ltp_results_dir: "../workflows/ltp/results/{{ ansible_kernel }}"

- name: Create the local results directory
  tags: ['first_run']
  ansible.builtin.file:
    path: "{{ ltp_results_dir }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost
  run_once: true

- name: Install dependencies for {{ ansible_os_family }}
  tags: ['build', 'ltp']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.package:
    name: "{{ ltp_os_family_packages[ansible_os_family] }}"
    state: present

- name: Set the pathname of the build directory
  tags: ['build', 'ltp']
  ansible.builtin.set_fact:
    ltp_build_dir: "{{ data_path }}/ltp"

- name: Remove existing ltp build directory
  tags: ['build', 'ltp']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.file:
    path: "{{ ltp_build_dir }}"
    state: absent

- name: Clone the ltp source code from {{ ltp_repo }}
  tags: ['build', 'clone', 'git', 'ltp']
  ansible.builtin.git:
    repo: "{{ ltp_repo }}"
    dest: "{{ ltp_build_dir }}"
    version: "{{ ltp_repo_commit }}"
    update: true
  retries: 3
  delay: 5
  register: result
  until: not result.failed

- name: Initialize autotools in the build directory
  tags: ['build', 'ltp']
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: autotools

- name: Configure the ltp build environment
  tags: ['build', 'ltp']
  ansible.builtin.command:
    cmd: "./configure"
    chdir: "{{ ltp_build_dir }}"
    creates: include/config.h

- name: Get nproc on the build system
  tags: ['build', 'ltp']
  ansible.builtin.command: "{{ num_jobs }}"
  register: nproc
  changed_when: false

- name: Build ltp from source
  tags: ['build', 'ltp']
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: all
    jobs: "{{ nproc.stdout }}"

- name: Ensure /opt has correct permissions
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.file:
    state: directory
    path: "/opt"
    mode: "u=rwx,g=rwx,o=rwxt"

- name: Install ltp on the test systems
  tags: ['ltp']
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: install
    jobs: "{{ nproc.stdout }}"

- name: Start the rpcbind service
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.systemd_service:
    name: rpcbind.service
    state: started
    enabled: true

- name: Generate /etc/nfs.conf
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.template:
    src: nfs.conf.j2
    dest: /etc/nfs.conf
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: Start the NFSD service
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.systemd_service:
    name: nfs-server.service
    state: reloaded
    enabled: true

- name: Run ltp
  tags: ['run_tests']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  vars:
    ltp_test: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') }}"
  ansible.builtin.command:
    cmd: "/opt/ltp/runltp {{ ltp_runltp_arg_dict[ltp_test] }}"
  changed_when: true
  failed_when: false

- name: Look for test results in target node's /opt/ltp/results
  tags: ['copy_results']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.find:
    paths: "/opt/ltp/results/"
  register: results_files

- name: Copy test results to the control host
  tags: ['copy_results']
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ ltp_results_dir }}/{{ ansible_host }}/"
    flat: true
    validate_checksum: false
  with_items: "{{ results_files.files }}"
  when:
    - results_files.matched > 0

- name: Look for test output in target node's /opt/ltp/output
  tags: ['copy_results']
  become: true
  become_flags: 'su - -c'
  become_method: sudo
  ansible.builtin.find:
    paths: "/opt/ltp/output/"
  register: output_files

- name: Copy test output to the control host
  tags: ['copy_results']
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ ltp_results_dir }}/{{ ansible_host }}/"
    flat: true
    validate_checksum: false
  with_items: "{{ output_files.files }}"
  when:
    - output_files.matched > 0
