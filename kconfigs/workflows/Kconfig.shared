menu "Shared workflow data partition"
source "kconfigs/workflows/Kconfig.data_partition"
endmenu

config HAVE_CUSTOM_KDEVOPS_GIT
	bool
	default n

config HAVE_CUSTOM_KDEVOPS_GIT_DATA
	bool
	default n

config HAVE_CUSTOM_KDEVOPS_DIR
	bool
	default n

config WORKFLOW_MAKE_CMD_OVERRIDE
	bool "Override default make command"
	default n
	help
	  We support different workflows which use the make command to build
	  source code on the target systems. You can override here the default
	  make command used to build on the target systems. By default we use:

	    {{ make }} -j{{ ansible_processor_vcpus }}

	  However this is known to not work as expected with containers.
	  The fix is in commit 34db57a47f875d11c4068567b9ec7ace174ec4cf
	  ("introduce fact "ansible_processor_nproc": number of usable
	  vcpus #66569") but it will be a while before we see this propagate.
	  This will be needed for containers. In the meantime you can
	  override the make command with this option.

if WORKFLOW_MAKE_CMD_OVERRIDE

config WORKFLOW_MAKE_CMD
	string "The make command to use when building"
	default "make -j 16" if TERRAFORM_AWS_INSTANCE_M5AD_4XLARGE
	default "make -j 1" if TERRAFORM_AZURE_VM_SIZE_STANDARD_DS1_V2
	default "make -j 4" if TERRAFORM_AZURE_VM_SIZE_STANDARD_DS3_V2
	default "make -j 8" if VAGRANT
	help
	  The actual make command to use when building Linux. You want to
	  optimize this as per the number of cores you have.

endif

config WORKFLOW_KDEVOPS_GIT_CUSTOM
	bool "Enable custom git tree of kdevops to clone on targets"
	select HAVE_CUSTOM_KDEVOPS_GIT
	help
	  Enable custom kdevops git tree to clone on targets.

if WORKFLOW_KDEVOPS_GIT_CUSTOM

config WORKFLOW_KDEVOPS_GIT
	string "Git tree of kdevops to clone on targets"
	default CUSTOM_KDEVOPS_GIT if HAVE_CUSTOM_KDEVOPS_GIT
	help
	  Some workflows want to also clone a version of kdevops on each target.
	  An example of this is when using the fstests workflow, which carries
	  a set of expunge lists to track known failures. Upon new failures the
	  local expunge list grows, and so a 'git diff' against the kdevops git
	  tree will reveal if there are any regressions against the known
	  baseline.

config WORKFLOW_KDEVOPS_GIT_VERSION
	string "Git tree version (branch/tag/commit) of kdevops to clone on targets"
	default "HEAD"
	help
	  Specify the verison of the custom kdevops git repository to check out
	  on each target.
endif # WORKFLOW_KDEVOPS_GIT_CUSTOM


if !WORKFLOW_KDEVOPS_GIT_CUSTOM

config HAVE_MIRROR_KDEVOPS
	bool
	depends on USE_LIBVIRT_MIRROR
	default $(shell, scripts/check_mirror_present.sh /mirror/kdevops.git)

config WORKFLOW_KDEVOPS_GIT
	string
	default "https://github.com/linux-kdevops/kdevops.git" if !GIT_ALTERNATIVES && !HAVE_CUSTOM_KDEVOPS_GIT
	default "https://github.com/linux-kdevops/kdevops.git" if GIT_LINUX_KDEVOPS_GITHUB && !HAVE_MIRROR_KDEVOPS
	default "https://gitlab.com/linux-kdevops/kdevops.git" if GIT_LINUX_KDEVOPS_GITLAB && !HAVE_MIRROR_KDEVOPS
	default $(shell, scripts/append-makefile-vars.sh git:// $(KDEVOPS_DEFAULT_BRIDGE_IP_VAGRANT) /mirror/kdevops.git) if HAVE_MIRROR_KDEVOPS && VAGRANT
	default $(shell, scripts/append-makefile-vars.sh git:// $(KDEVOPS_DEFAULT_BRIDGE_IP_GUESTFS) /mirror/kdevops.git) if HAVE_MIRROR_KDEVOPS && GUESTFS
	help
	  Some workflows want to also clone a version of kdevops on each target.
	  An example of this is when using the fstests workflow, which carries
	  a set of expunge lists to track known failures. Upon new failures the
	  local expunge list grows, and so a 'git diff' against the kdevops git
	  tree will reveal if there are any regressions against the known
	  baseline.

config WORKFLOW_KDEVOPS_GIT_VERSION
	default "HEAD"
	help
	  Specify the verison of the custom kdevops git repository to check out
	  on each target.

endif # !WORKFLOW_KDEVOPS_GIT_CUSTOM

config WORKFLOW_KDEVOPS_GIT_DATA
	string "The destination directory where to clone the git tree"
	default "{{data_path}}/kdevops" if !HAVE_CUSTOM_KDEVOPS_GIT_DATA
	default CUSTOM_KDEVOPS_GIT_DATA if HAVE_CUSTOM_KDEVOPS_GIT_DATA
	help
	  This is the target location of where to clone the above git tree.
	  Note that {{data_path}} corresponds to the location set by the
	  configuration option CONFIG_WORKFLOW_DATA_PATH above.

config WORKFLOW_KDEVOPS_DIR
	string
	default WORKFLOW_KDEVOPS_GIT_DATA if !HAVE_CUSTOM_KDEVOPS_DIR
	default CUSTOM_KDEVOPS_DIR if HAVE_CUSTOM_KDEVOPS_DIR

config WORKFLOW_KOTD_ENABLE
	bool "Enable KOTD - Kernel of the day reving"
	depends on WORKFLOW_LINUX_DISTRO
	default n
	help
	  When doing target testing on a Linux distribution it is often useful
	  to be able to update the distribution kernel to the latest available
	  version for a release. This may be as simple as an update of a package
	  however distributions may also have special repositories designed to
	  be updated more regularly than the general release repository.
	  Enabling this option will add such kotd repository if the distribution
	  had one, and as a last step will try to install the very latest kernel
	  available for the distribution.

	  This may be useful in combination of using a kdevops kernel-ci loop:
	  once steady state has been achieved one can simply update the kernel
	  and re-run the kernel-ci loop to ensure no regressions have been
	  found on the latest kernel.

config HAVE_DISTRO_CUSTOM_KOTD_REPO
	bool "Distro has custom KOTD repo"
	default n
	help
	  Enable this to be able to specify the custom KOTD repo for your Linux
	  distribution.

config CUSTOM_DISTRO_KOTD_REPO
	string "Distribution KOTD repository"
	depends on WORKFLOW_KOTD_ENABLE
	depends on HAVE_DISTRO_CUSTOM_KOTD_REPO
	default VAGRANT_SUSE_KOTD_REPO if VAGRANT_SUSE
	help
	  The URL of the custom KOTD repo for your Linux distribution.

config CUSTOM_DISTRO_KOTD_REPO_NAME
	string "Distribution KOTD repository name"
	depends on WORKFLOW_KOTD_ENABLE
	depends on HAVE_DISTRO_CUSTOM_KOTD_REPO
	default VAGRANT_SUSE_KOTD_REPO_NAME if VAGRANT_SUSE
	help
	  The name of the custom KOTD repo for your Linux distribution.
